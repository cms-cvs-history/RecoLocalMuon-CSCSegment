# The following algorithms looks how far a rechit is from the
# proto segment in terms of its error ellipse.  This is different
# from the other algorithms which use a cylinder around the proto
# segment and look for rechits within that cylinder

block DF_ME1234_1 = {
    untracked bool CSCSegmentDebug          = false
    untracked double nSigmaFromSegment      = 5.
    untracked int32 minHitsPerSegment       = 3
    untracked double dRPhiFineMax           = 6.0
    untracked double dPhiFineMax            = 0.025
    untracked double chi2Max                = 10000.
    untracked int32 minLayersApart          = 2
    untracked double thetaScaleMax          = 1.2
    untracked double tanPhiMax              = 0.5
}

block DF_ME1234_2 = {
    untracked bool CSCSegmentDebug          = flase
    untracked double nSigmaFromSegment      = 5.
    untracked int32 minHitsPerSegment       = 3
    untracked double dRPhiFineMax           = 6.0
    untracked double dPhiFineMax            = 0.025
    untracked double chi2Max                = 10000.
    untracked int32 minLayersApart          = 2
    untracked double thetaScaleMax          = 1.2
    untracked double tanPhiMax              = 0.5
}

block DF_ME1A = {
    untracked bool CSCSegmentDebug          = false
    untracked double nSigmaFromSegment      = 5.
    untracked int32 minHitsPerSegment       = 3
    untracked double dRPhiFineMax           = 3.0
    untracked double dPhiFineMax            = 0.013
    untracked double chi2Max                = 10000.
    untracked int32 minLayersApart          = 2
    untracked double thetaScaleMax          = 1.
    untracked double tanPhiMax              = 0.5
}

block CSCSegAlgoDF = {
    
    VPSet algo_psets = {
        {using DF_ME1234_1},{using DF_ME1234_2}, {using DF_ME1A}
    }
		
    # chamber_list ME1/a, ME1/b, ME1/2, ME1/3, ME2/1, ME2/2, ME3/1, ME3/2, ME4/1
    vint32 parameters_per_chamber_type = {3, 1, 1, 2, 1, 2, 1, 2, 1}   

    string algo_name = "CSCSegAlgoDF"
}
